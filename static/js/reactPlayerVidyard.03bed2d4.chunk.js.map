{"version":3,"sources":["../node_modules/react-player/lib/players/Vidyard.js"],"names":["mod","__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__copyProps","to","from","except","desc","key","call","get","enumerable","__publicField","obj","value","configurable","writable","__defNormalProp","Vidyard_exports","target","all","name","__export","default","Vidyard","module","exports","import_react","isNodeMode","__esModule","__toESM","__webpack_require__","import_utils","import_patterns","SDK_URL","SDK_GLOBAL","SDK_GLOBAL_READY","Component","[object Object]","super","arguments","this","callPlayer","setVolume","props","volume","container","onMount","url","playing","config","onError","onDuration","id","match","MATCH_URL_VIDYARD","player","stop","getSDK","then","Vidyard2","api","addReadyListener","data","on","onReady","onPlay","onPause","onSeek","onEnded","renderPlayer","uuid","autoplay","options","getPlayerMetadata","meta","duration","length_in_seconds","window","VidyardV4","destroyPlayer","amount","keepPlaying","length","undefined","pause","fraction","rate","display","style","width","height","createElement","ref","canPlay","vidyard"],"mappings":"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","file":"static/js/reactPlayerVidyard.03bed2d4.chunk.js","sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar Vidyard_exports = {};\n__export(Vidyard_exports, {\n  default: () => Vidyard\n});\nmodule.exports = __toCommonJS(Vidyard_exports);\nvar import_react = __toESM(require(\"react\"));\nvar import_utils = require(\"../utils\");\nvar import_patterns = require(\"../patterns\");\nconst SDK_URL = \"https://play.vidyard.com/embed/v4.js\";\nconst SDK_GLOBAL = \"VidyardV4\";\nconst SDK_GLOBAL_READY = \"onVidyardAPI\";\nclass Vidyard extends import_react.Component {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"callPlayer\", import_utils.callPlayer);\n    __publicField(this, \"mute\", () => {\n      this.setVolume(0);\n    });\n    __publicField(this, \"unmute\", () => {\n      if (this.props.volume !== null) {\n        this.setVolume(this.props.volume);\n      }\n    });\n    __publicField(this, \"ref\", container => {\n      this.container = container;\n    });\n  }\n  componentDidMount() {\n    this.props.onMount && this.props.onMount(this);\n  }\n  load(url) {\n    const {\n      playing,\n      config,\n      onError,\n      onDuration\n    } = this.props;\n    const id = url && url.match(import_patterns.MATCH_URL_VIDYARD)[1];\n    if (this.player) {\n      this.stop();\n    }\n    (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(Vidyard2 => {\n      if (!this.container) return;\n      Vidyard2.api.addReadyListener((data, player) => {\n        if (this.player) {\n          return;\n        }\n        this.player = player;\n        this.player.on(\"ready\", this.props.onReady);\n        this.player.on(\"play\", this.props.onPlay);\n        this.player.on(\"pause\", this.props.onPause);\n        this.player.on(\"seek\", this.props.onSeek);\n        this.player.on(\"playerComplete\", this.props.onEnded);\n      }, id);\n      Vidyard2.api.renderPlayer({\n        uuid: id,\n        container: this.container,\n        autoplay: playing ? 1 : 0,\n        ...config.options\n      });\n      Vidyard2.api.getPlayerMetadata(id).then(meta => {\n        this.duration = meta.length_in_seconds;\n        onDuration(meta.length_in_seconds);\n      });\n    }, onError);\n  }\n  play() {\n    this.callPlayer(\"play\");\n  }\n  pause() {\n    this.callPlayer(\"pause\");\n  }\n  stop() {\n    window.VidyardV4.api.destroyPlayer(this.player);\n  }\n  seekTo(amount) {\n    let keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.callPlayer(\"seek\", amount);\n    if (!keepPlaying) {\n      this.pause();\n    }\n  }\n  setVolume(fraction) {\n    this.callPlayer(\"setVolume\", fraction);\n  }\n  setPlaybackRate(rate) {\n    this.callPlayer(\"setPlaybackSpeed\", rate);\n  }\n  getDuration() {\n    return this.duration;\n  }\n  getCurrentTime() {\n    return this.callPlayer(\"currentTime\");\n  }\n  getSecondsLoaded() {\n    return null;\n  }\n  render() {\n    const {\n      display\n    } = this.props;\n    const style = {\n      width: \"100%\",\n      height: \"100%\",\n      display\n    };\n    return /* @__PURE__ */import_react.default.createElement(\"div\", {\n      style\n    }, /* @__PURE__ */import_react.default.createElement(\"div\", {\n      ref: this.ref\n    }));\n  }\n}\n__publicField(Vidyard, \"displayName\", \"Vidyard\");\n__publicField(Vidyard, \"canPlay\", import_patterns.canPlay.vidyard);"],"sourceRoot":""}