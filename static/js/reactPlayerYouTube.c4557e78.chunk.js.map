{"version":3,"sources":["../node_modules/react-player/lib/players/YouTube.js"],"names":["mod","__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__copyProps","to","from","except","desc","key","call","get","enumerable","__publicField","obj","value","configurable","writable","__defNormalProp","YouTube_exports","target","all","name","__export","default","YouTube","module","exports","import_react","isNodeMode","__esModule","__toESM","__webpack_require__","import_utils","import_patterns","SDK_URL","SDK_GLOBAL","SDK_GLOBAL_READY","MATCH_PLAYLIST","MATCH_USER_UPLOADS","MATCH_NOCOOKIE","NOCOOKIE_HOST","Component","[object Object]","super","arguments","this","callPlayer","url","Array","listType","playlist","map","getID","join","test","playlistId","match","list","replace","username","event","data","onPlay","onPause","onBuffer","onBufferEnd","onEnded","onReady","loop","config","playerVars","onUnstarted","props","UNSTARTED","PLAYING","PAUSED","BUFFERING","ENDED","CUED","window","PlayerState","isPlaylist","start","seekTo","play","container","onMount","MATCH_URL_YOUTUBE","isReady","playing","muted","playsinline","controls","onError","embedOptions","id","player","loadPlaylist","parsePlaylist","cueVideoById","videoId","startSeconds","parseStartTime","endSeconds","parseEndTime","end","getSDK","YT","loaded","then","Player","width","height","autoplay","mute","origin","location","events","setLoop","onPlaybackRateChange","onPlaybackQualityChange","onStateChange","host","console","warn","document","body","contains","amount","keepPlaying","length","undefined","pause","fraction","rate","getDuration","display","style","createElement","ref","canPlay","youtube"],"mappings":"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","file":"static/js/reactPlayerYouTube.c4557e78.chunk.js","sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar YouTube_exports = {};\n__export(YouTube_exports, {\n  default: () => YouTube\n});\nmodule.exports = __toCommonJS(YouTube_exports);\nvar import_react = __toESM(require(\"react\"));\nvar import_utils = require(\"../utils\");\nvar import_patterns = require(\"../patterns\");\nconst SDK_URL = \"https://www.youtube.com/iframe_api\";\nconst SDK_GLOBAL = \"YT\";\nconst SDK_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nconst MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;\nconst MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/;\nconst MATCH_NOCOOKIE = /youtube-nocookie\\.com/;\nconst NOCOOKIE_HOST = \"https://www.youtube-nocookie.com\";\nclass YouTube extends import_react.Component {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"callPlayer\", import_utils.callPlayer);\n    __publicField(this, \"parsePlaylist\", url => {\n      if (url instanceof Array) {\n        return {\n          listType: \"playlist\",\n          playlist: url.map(this.getID).join(\",\")\n        };\n      }\n      if (MATCH_PLAYLIST.test(url)) {\n        const [, playlistId] = url.match(MATCH_PLAYLIST);\n        return {\n          listType: \"playlist\",\n          list: playlistId.replace(/^UC/, \"UU\")\n        };\n      }\n      if (MATCH_USER_UPLOADS.test(url)) {\n        const [, username] = url.match(MATCH_USER_UPLOADS);\n        return {\n          listType: \"user_uploads\",\n          list: username\n        };\n      }\n      return {};\n    });\n    __publicField(this, \"onStateChange\", event => {\n      const {\n        data\n      } = event;\n      const {\n        onPlay,\n        onPause,\n        onBuffer,\n        onBufferEnd,\n        onEnded,\n        onReady,\n        loop,\n        config: {\n          playerVars,\n          onUnstarted\n        }\n      } = this.props;\n      const {\n        UNSTARTED,\n        PLAYING,\n        PAUSED,\n        BUFFERING,\n        ENDED,\n        CUED\n      } = window[SDK_GLOBAL].PlayerState;\n      if (data === UNSTARTED) onUnstarted();\n      if (data === PLAYING) {\n        onPlay();\n        onBufferEnd();\n      }\n      if (data === PAUSED) onPause();\n      if (data === BUFFERING) onBuffer();\n      if (data === ENDED) {\n        const isPlaylist = !!this.callPlayer(\"getPlaylist\");\n        if (loop && !isPlaylist) {\n          if (playerVars.start) {\n            this.seekTo(playerVars.start);\n          } else {\n            this.play();\n          }\n        }\n        onEnded();\n      }\n      if (data === CUED) onReady();\n    });\n    __publicField(this, \"mute\", () => {\n      this.callPlayer(\"mute\");\n    });\n    __publicField(this, \"unmute\", () => {\n      this.callPlayer(\"unMute\");\n    });\n    __publicField(this, \"ref\", container => {\n      this.container = container;\n    });\n  }\n  componentDidMount() {\n    this.props.onMount && this.props.onMount(this);\n  }\n  getID(url) {\n    if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n      return null;\n    }\n    return url.match(import_patterns.MATCH_URL_YOUTUBE)[1];\n  }\n  load(url, isReady) {\n    const {\n      playing,\n      muted,\n      playsinline,\n      controls,\n      loop,\n      config,\n      onError\n    } = this.props;\n    const {\n      playerVars,\n      embedOptions\n    } = config;\n    const id = this.getID(url);\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n        this.player.loadPlaylist(this.parsePlaylist(url));\n        return;\n      }\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: (0, import_utils.parseStartTime)(url) || playerVars.start,\n        endSeconds: (0, import_utils.parseEndTime)(url) || playerVars.end\n      });\n      return;\n    }\n    (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return;\n      this.player = new YT.Player(this.container, {\n        width: \"100%\",\n        height: \"100%\",\n        videoId: id,\n        playerVars: {\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: (0, import_utils.parseStartTime)(url),\n          end: (0, import_utils.parseEndTime)(url),\n          origin: window.location.origin,\n          playsinline: playsinline ? 1 : 0,\n          ...this.parsePlaylist(url),\n          ...playerVars\n        },\n        events: {\n          onReady: () => {\n            if (loop) {\n              this.player.setLoop(true);\n            }\n            this.props.onReady();\n          },\n          onPlaybackRateChange: event => this.props.onPlaybackRateChange(event.data),\n          onPlaybackQualityChange: event => this.props.onPlaybackQualityChange(event),\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        },\n        host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0,\n        ...embedOptions\n      });\n    }, onError);\n    if (embedOptions.events) {\n      console.warn(\"Using `embedOptions.events` will likely break things. Use ReactPlayer\\u2019s callback props instead, eg onReady, onPlay, onPause\");\n    }\n  }\n  play() {\n    this.callPlayer(\"playVideo\");\n  }\n  pause() {\n    this.callPlayer(\"pauseVideo\");\n  }\n  stop() {\n    if (!document.body.contains(this.callPlayer(\"getIframe\"))) return;\n    this.callPlayer(\"stopVideo\");\n  }\n  seekTo(amount) {\n    let keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.callPlayer(\"seekTo\", amount);\n    if (!keepPlaying && !this.props.playing) {\n      this.pause();\n    }\n  }\n  setVolume(fraction) {\n    this.callPlayer(\"setVolume\", fraction * 100);\n  }\n  setPlaybackRate(rate) {\n    this.callPlayer(\"setPlaybackRate\", rate);\n  }\n  setLoop(loop) {\n    this.callPlayer(\"setLoop\", loop);\n  }\n  getDuration() {\n    return this.callPlayer(\"getDuration\");\n  }\n  getCurrentTime() {\n    return this.callPlayer(\"getCurrentTime\");\n  }\n  getSecondsLoaded() {\n    return this.callPlayer(\"getVideoLoadedFraction\") * this.getDuration();\n  }\n  render() {\n    const {\n      display\n    } = this.props;\n    const style = {\n      width: \"100%\",\n      height: \"100%\",\n      display\n    };\n    return /* @__PURE__ */import_react.default.createElement(\"div\", {\n      style\n    }, /* @__PURE__ */import_react.default.createElement(\"div\", {\n      ref: this.ref\n    }));\n  }\n}\n__publicField(YouTube, \"displayName\", \"YouTube\");\n__publicField(YouTube, \"canPlay\", import_patterns.canPlay.youtube);"],"sourceRoot":""}