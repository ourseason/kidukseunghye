{"version":3,"sources":["../node_modules/react-player/lib/players/SoundCloud.js"],"names":["mod","__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__copyProps","to","from","except","desc","key","call","get","enumerable","__publicField","obj","value","configurable","writable","__defNormalProp","SoundCloud_exports","target","all","name","__export","default","SoundCloud","module","exports","import_react","isNodeMode","__esModule","__toESM","__webpack_require__","import_utils","import_patterns","SDK_URL","SDK_GLOBAL","Component","[object Object]","super","arguments","this","callPlayer","setVolume","props","volume","iframe","onMount","url","isReady","getSDK","then","SC","PLAY","PLAY_PROGRESS","PAUSE","FINISH","ERROR","Widget","Events","player","bind","onPlay","duration","currentTime","onPause","e","currentPosition","fractionLoaded","loadedProgress","onEnded","onError","load","config","options","callback","getDuration","onReady","seconds","keepPlaying","length","undefined","pause","fraction","display","style","width","height","createElement","ref","src","encodeURIComponent","frameBorder","allow","canPlay","soundcloud"],"mappings":"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","file":"static/js/reactPlayerSoundCloud.5bd813db.chunk.js","sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar SoundCloud_exports = {};\n__export(SoundCloud_exports, {\n  default: () => SoundCloud\n});\nmodule.exports = __toCommonJS(SoundCloud_exports);\nvar import_react = __toESM(require(\"react\"));\nvar import_utils = require(\"../utils\");\nvar import_patterns = require(\"../patterns\");\nconst SDK_URL = \"https://w.soundcloud.com/player/api.js\";\nconst SDK_GLOBAL = \"SC\";\nclass SoundCloud extends import_react.Component {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"callPlayer\", import_utils.callPlayer);\n    __publicField(this, \"duration\", null);\n    __publicField(this, \"currentTime\", null);\n    __publicField(this, \"fractionLoaded\", null);\n    __publicField(this, \"mute\", () => {\n      this.setVolume(0);\n    });\n    __publicField(this, \"unmute\", () => {\n      if (this.props.volume !== null) {\n        this.setVolume(this.props.volume);\n      }\n    });\n    __publicField(this, \"ref\", iframe => {\n      this.iframe = iframe;\n    });\n  }\n  componentDidMount() {\n    this.props.onMount && this.props.onMount(this);\n  }\n  load(url, isReady) {\n    (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then(SC => {\n      if (!this.iframe) return;\n      const {\n        PLAY,\n        PLAY_PROGRESS,\n        PAUSE,\n        FINISH,\n        ERROR\n      } = SC.Widget.Events;\n      if (!isReady) {\n        this.player = SC.Widget(this.iframe);\n        this.player.bind(PLAY, this.props.onPlay);\n        this.player.bind(PAUSE, () => {\n          const remaining = this.duration - this.currentTime;\n          if (remaining < 0.05) {\n            return;\n          }\n          this.props.onPause();\n        });\n        this.player.bind(PLAY_PROGRESS, e => {\n          this.currentTime = e.currentPosition / 1e3;\n          this.fractionLoaded = e.loadedProgress;\n        });\n        this.player.bind(FINISH, () => this.props.onEnded());\n        this.player.bind(ERROR, e => this.props.onError(e));\n      }\n      this.player.load(url, {\n        ...this.props.config.options,\n        callback: () => {\n          this.player.getDuration(duration => {\n            this.duration = duration / 1e3;\n            this.props.onReady();\n          });\n        }\n      });\n    });\n  }\n  play() {\n    this.callPlayer(\"play\");\n  }\n  pause() {\n    this.callPlayer(\"pause\");\n  }\n  stop() {}\n  seekTo(seconds) {\n    let keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.callPlayer(\"seekTo\", seconds * 1e3);\n    if (!keepPlaying) {\n      this.pause();\n    }\n  }\n  setVolume(fraction) {\n    this.callPlayer(\"setVolume\", fraction * 100);\n  }\n  getDuration() {\n    return this.duration;\n  }\n  getCurrentTime() {\n    return this.currentTime;\n  }\n  getSecondsLoaded() {\n    return this.fractionLoaded * this.duration;\n  }\n  render() {\n    const {\n      display\n    } = this.props;\n    const style = {\n      width: \"100%\",\n      height: \"100%\",\n      display\n    };\n    return /* @__PURE__ */import_react.default.createElement(\"iframe\", {\n      ref: this.ref,\n      src: `https://w.soundcloud.com/player/?url=${encodeURIComponent(this.props.url)}`,\n      style,\n      frameBorder: 0,\n      allow: \"autoplay\"\n    });\n  }\n}\n__publicField(SoundCloud, \"displayName\", \"SoundCloud\");\n__publicField(SoundCloud, \"canPlay\", import_patterns.canPlay.soundcloud);\n__publicField(SoundCloud, \"loopOnEnded\", true);"],"sourceRoot":""}